{
  "name": "ti",
  "version": "1.0.4",
  "description": "A simple MVC framework for node web server.",
  "main": "index.js",
  "scripts": {
    "test": "node sample/test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mrtian/Ti.git"
  },
  "keywords": [
    "MVC",
    "node",
    "Ti",
    "ti",
    "webserver"
  ],
  "author": {
    "name": "mt"
  },
  "license": "MIT",
  "readme": "## Ti\nTi is a MVC web application server framework for [node.js](http://nodejs.org).\nIt provides the basic development framework and some related components, including libraries and tools. \n\n## Install\n    npm install Ti\n## Sample\n\tnode ./sample/test.js\n## Document\n\nApplication's document path\n<pre>\n//------------------app path-------------\n|--app\n    |----app.js // app input file\n    |----controller //controller path\n        |----site.js //site controller\n        ------...\n    |----view //template path\n        |----inc\n            |----header.tpl\n        |----index.tpl\n        |----...\n    |----model //model path\n    |----plugin\n    |----...\n</pre>\n### simple to create a app\n\n<pre>\n//get application\nvar App = require('ti').application;\n\n//definne product path;\nvar productPath = process.cwd();\n\nvar app = new App({\n\t//configure controller path\n\tcontrollerPath:productPath+\"/controller\",\n\t//configure default controller name\n\tdefaultController:'site',\n\t//route config\n\troutes:{\n\t\t'p-':\"product/detail\",//'p-','controller/action'\n\t},\n\t//port\n\tport:5927,\n\t//configure route start sep\n\tbaseUriIndex:0,\n\t//configure template path\n\tviewPath:productPath+'/view',\n\t//configure template plugin path\n\ttemplatePluginPath:productPath+\"/plugins/view\"\n});\n\n//app start\napp.start();\n</pre>\t\n\n###Model\n<pre>\n//path:model/product.js\n//demo for product\nmodule.exports = {\n\tgetItem:function(id){\n\t\t//code for getItem\n\t\treturn {\n\t\t\tid:id,\n\t\t\ttitle:\"Demo for product\",\n\t\t\tcontent:\"Demo for product content\"\n\t\t}\n\t},\n\tgetList:function(){\n\t\t//code for getList\n\t}\n\n}\n</pre>\n\n###Controller\n\n<pre>\n//demo for ProductController\n//path: controller/product.js\n\nvar Controller = require('ti').Controller;\n//exports\nmodule.exports = new Controller({\n\tdetailAction:function(req,res){\n\t\tvar id = req.params.id,\n\t\t\tproductModel = require('model/product'),\n\t\t\titem = productModel.getItem(id);\n\n\t\tthis.display('test.tpl',item);\n\t}\t\t\n});\n</pre>\n###View\n<pre>\n&lt;!DOCTYPE&gt;\n&lt;head&gt;\n\t&lt;title>Ti-Demo&lt;/title&gt;\n&lt;/head&gt;\n&lt;html&gt;\n&lt;body&gt;\n\t&lt;h1&gt;&lt;%=title%&gt;&lt;/h1&gt;\n\t&lt;p&gt;&lt;%=content%&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n\n####openTag is : <% \n####closeTag is : %> \nYou can modify it like this:\n<pre>\nvar template = require('ti').template;\n\ntemplate.openTag = \"<{\" ; // You custom openTag put here.\ntemplate.closeTag = \"}>\" ;// You custom closeTag put here.\n</pre>\n####include a tpl\n<pre>\n&lt;%=include('a.tpl',data)%&gt;\n</pre>\n###template plugin:\n<pre>\nvar template = require('ti').template;\n//define a template plugin\ntemplate.plugin('escape',function(str,type){\n\t//code for plugin\n\t//need return what u want;\n\treturn str;\n});\n</pre>\n//use a plugin in xxx.tpl\n<pre>\n&lt;p&gt;&lt;%=title|escape:\"html\"%&gt;&lt;/h1&gt;\n</pre>\n####some default plugin:\n<b>escape</b>: escape tpl var for html or url :    \n\n<b>default</b>: set a default value for tpl var;    \n\n<b>truncate</b>: truncate tpl var ;    \n\n#####then,open browse and view: http://127.0.0.1:5927\n<b>Enjoy.</b>\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mrtian/Ti/issues"
  },
  "homepage": "https://github.com/mrtian/Ti",
  "_id": "ti@1.0.4",
  "_shasum": "06ea0a092189417f9f52dbb03e3d5a0cd9df35fd",
  "_from": "ti@",
  "_resolved": "https://registry.npmjs.org/ti/-/ti-1.0.4.tgz"
}
